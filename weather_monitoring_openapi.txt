import requests
import sqlite3
from datetime import datetime, timedelta, timezone
import time
import matplotlib.pyplot as plt

# OpenWeatherMap API Configuration
API_KEY = '202c25903ace1cd2b97c65590fd7a3ed'  # openweathermap actual API key
API_URL = 'http://api.openweathermap.org/data/2.5/weather'
CITIES = ['Delhi', 'Mumbai', 'Chennai', 'Bangalore', 'Kolkata', 'Hyderabad']

# Alert Configuration
ALERT_THRESHOLD = 25.0  # Lowered for testing
ALERT_COUNT_THRESHOLD = 2  # Number of consecutive updates required to trigger an alert

     # Database Setup
DB_NAME = 'weather_data.db'

     # Connect to SQLite database
conn = sqlite3.connect(DB_NAME)
cursor = conn.cursor()

     # Create the table if it doesn't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS daily_weather_summary (
                    city TEXT,
                    date TEXT,
                    avg_temp REAL,
                    max_temp REAL,
                    min_temp REAL,
                    dominant_condition TEXT
                 )''')
conn.commit()


def fetch_weather(city):
    """Fetch weather data from the OpenWeatherMap API for a given city."""
    params = {
        'q': city,
        'appid': API_KEY
    }
    response = requests.get(API_URL, params=params)
    if response.status_code == 200:
        print(f"Successfully fetched data for {city}")
        return response.json()
    else:
        print(f"Failed to fetch weather data for {city}. Status code: {response.status_code}")
        return None


def process_weather_data(weather_data, daily_data):
    """Process and store weather data."""
    if not weather_data:
        return

    city = weather_data['name']
    timestamp = weather_data['dt']
    date = datetime.fromtimestamp(timestamp, timezone.utc).strftime('%Y-%m-%d')
    temp = weather_data['main']['temp'] - 273.15  # Convert Kelvin to Celsius
    condition = weather_data['weather'][0]['main']

        # Print the details
    print(f"City: {city}, Date: {date}, Temperature: {temp:.2f}°C, Condition: {condition}")

        # Initialize or update daily data
    if city not in daily_data:
        daily_data[city] = {}
    if date not in daily_data[city]:
        daily_data[city][date] = {
            'temperatures': [],
            'conditions': []
        }

    daily_data[city][date]['temperatures'].append(temp)
    daily_data[city][date]['conditions'].append(condition)

    print(f"Processed weather data for {city} on {date}")


def calculate_daily_summary(daily_data, date, city):
    """Calculate the daily weather summary."""
    data = daily_data[city][date]
    avg_temp = sum(data['temperatures']) / len(data['temperatures'])
    max_temp = max(data['temperatures'])
    min_temp = min(data['temperatures'])
    dominant_condition = max(set(data['conditions']), key=data['conditions'].count)

          # Insert daily summary into the database
    cursor.execute('''INSERT INTO daily_weather_summary (city, date, avg_temp, max_temp, min_temp, dominant_condition)
                      VALUES (?, ?, ?, ?, ?, ?)''', (city, date, avg_temp, max_temp, min_temp, dominant_condition))
    conn.commit()

    print(f"Storing daily summary in the database for {city} on {date}")


def check_alerts(weather_data, alert_counts):
    """Check if the current weather data exceeds alert thresholds."""
    city = weather_data['name']
    temp = weather_data['main']['temp'] - 273.15     # Convert Kelvin to Celsius

    if city not in alert_counts:
        alert_counts[city] = 0

    if temp > ALERT_THRESHOLD:
        alert_counts[city] += 1
        if alert_counts[city] >= ALERT_COUNT_THRESHOLD:
            print(
                f"ALERT: Temperature in {city} has exceeded {ALERT_THRESHOLD}°C for {ALERT_COUNT_THRESHOLD} consecutive updates!")
    else:
        alert_counts[city] = 0    # Reset alert count if the threshold is not exceeded


def plot_daily_summaries():
    """Plot daily temperature trends."""
    cursor.execute("SELECT city, date, avg_temp FROM daily_weather_summary")
    rows = cursor.fetchall()

    if not rows:
        print("No data available to plot.")
        return

    data = {}
    for row in rows:
        city, date, avg_temp = row
        if city not in data:
            data[city] = {'dates': [], 'avg_temps': []}
        data[city]['dates'].append(date)
        data[city]['avg_temps'].append(avg_temp)

    plt.figure(figsize=(12, 6))
    for city, city_data in data.items():
        plt.plot(city_data['dates'], city_data['avg_temps'], label=city)

    plt.xlabel('Date')
    plt.ylabel('Average Temperature (°C)')
    plt.title('Daily Average Temperature Trends')
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


def run_weather_monitoring():
    """Main function to run the weather monitoring."""
    print("Starting weather monitoring system...")
    daily_data = {}
    alert_counts = {}

    while True:
        for city in CITIES:
            print(f"Fetching weather data for {city}...")
            weather_data = fetch_weather(city)
            if weather_data:
                process_weather_data(weather_data, daily_data)
                check_alerts(weather_data, alert_counts)

               # Calculate daily summaries for previous day
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        for city in CITIES:
            if city in daily_data and yesterday in daily_data[city]:
                calculate_daily_summary(daily_data, yesterday, city)

        print("Sleeping for 5 minutes...")
        time.sleep(300)  # Wait for 5 minutes before fetching the data again


if __name__ == '__main__':
    run_weather_monitoring()
    # plot daily summaries after collecting some data
    plot_daily_summaries()
